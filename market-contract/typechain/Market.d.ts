/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "ChainId()": FunctionFragment;
    "buyNft((string,address,address,uint256,uint256,string[],uint256[]),string)": FunctionFragment;
    "gatewayContract()": FunctionFragment;
    "getRequestMetadata(uint64,uint64,uint64,uint64,uint128,uint8,bool,string)": FunctionFragment;
    "iAck(uint256,bool,bytes)": FunctionFragment;
    "iReceive(string,bytes,string)": FunctionFragment;
    "lockedValue(uint256)": FunctionFragment;
    "ourContractOnChains(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "setContractOnChain(string,string)": FunctionFragment;
    "setDappMetadata(string)": FunctionFragment;
    "setGateway(address)": FunctionFragment;
    "toBytes(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyNft",
    values: [
      {
        orderChain: string;
        owner: string;
        collection: string;
        token_id: BigNumberish;
        nonce: BigNumberish;
        chainsIds: string[];
        priceOnChains: BigNumberish[];
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gatewayContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestMetadata",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "iAck",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "iReceive",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ourContractOnChains",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContractOnChain",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDappMetadata",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGateway", values: [string]): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;

  decodeFunctionResult(functionFragment: "ChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gatewayContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iAck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ourContractOnChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractOnChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDappMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;

  events: {};
}

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    ChainId(overrides?: CallOverrides): Promise<[string]>;

    buyNft(
      order: {
        orderChain: string;
        owner: string;
        collection: string;
        token_id: BigNumberish;
        nonce: BigNumberish;
        chainsIds: string[];
        priceOnChains: BigNumberish[];
      },
      signature: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gatewayContract(overrides?: CallOverrides): Promise<[string]>;

    getRequestMetadata(
      destGasLimit: BigNumberish,
      destGasPrice: BigNumberish,
      ackGasLimit: BigNumberish,
      ackGasPrice: BigNumberish,
      relayerFees: BigNumberish,
      ackType: BigNumberish,
      isReadCall: boolean,
      asmAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    iAck(
      requestIdentifier: BigNumberish,
      execFlag: boolean,
      execData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    iReceive(
      requestSender: string,
      packet: BytesLike,
      srcChainId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedValue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        buyer: string;
        value: BigNumber;
      }
    >;

    ourContractOnChains(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setContractOnChain(
      chainId: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGateway(
      gateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toBytes(
      a: string,
      overrides?: CallOverrides
    ): Promise<[string] & { b: string }>;
  };

  ChainId(overrides?: CallOverrides): Promise<string>;

  buyNft(
    order: {
      orderChain: string;
      owner: string;
      collection: string;
      token_id: BigNumberish;
      nonce: BigNumberish;
      chainsIds: string[];
      priceOnChains: BigNumberish[];
    },
    signature: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gatewayContract(overrides?: CallOverrides): Promise<string>;

  getRequestMetadata(
    destGasLimit: BigNumberish,
    destGasPrice: BigNumberish,
    ackGasLimit: BigNumberish,
    ackGasPrice: BigNumberish,
    relayerFees: BigNumberish,
    ackType: BigNumberish,
    isReadCall: boolean,
    asmAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  iAck(
    requestIdentifier: BigNumberish,
    execFlag: boolean,
    execData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  iReceive(
    requestSender: string,
    packet: BytesLike,
    srcChainId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedValue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      buyer: string;
      value: BigNumber;
    }
  >;

  ourContractOnChains(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setContractOnChain(
    chainId: string,
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDappMetadata(
    feePayerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGateway(
    gateway: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toBytes(a: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ChainId(overrides?: CallOverrides): Promise<string>;

    buyNft(
      order: {
        orderChain: string;
        owner: string;
        collection: string;
        token_id: BigNumberish;
        nonce: BigNumberish;
        chainsIds: string[];
        priceOnChains: BigNumberish[];
      },
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gatewayContract(overrides?: CallOverrides): Promise<string>;

    getRequestMetadata(
      destGasLimit: BigNumberish,
      destGasPrice: BigNumberish,
      ackGasLimit: BigNumberish,
      ackGasPrice: BigNumberish,
      relayerFees: BigNumberish,
      ackType: BigNumberish,
      isReadCall: boolean,
      asmAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    iAck(
      requestIdentifier: BigNumberish,
      execFlag: boolean,
      execData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    iReceive(
      requestSender: string,
      packet: BytesLike,
      srcChainId: string,
      overrides?: CallOverrides
    ): Promise<string>;

    lockedValue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        buyer: string;
        value: BigNumber;
      }
    >;

    ourContractOnChains(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setContractOnChain(
      chainId: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGateway(gateway: string, overrides?: CallOverrides): Promise<void>;

    toBytes(a: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    buyNft(
      order: {
        orderChain: string;
        owner: string;
        collection: string;
        token_id: BigNumberish;
        nonce: BigNumberish;
        chainsIds: string[];
        priceOnChains: BigNumberish[];
      },
      signature: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gatewayContract(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestMetadata(
      destGasLimit: BigNumberish,
      destGasPrice: BigNumberish,
      ackGasLimit: BigNumberish,
      ackGasPrice: BigNumberish,
      relayerFees: BigNumberish,
      ackType: BigNumberish,
      isReadCall: boolean,
      asmAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iAck(
      requestIdentifier: BigNumberish,
      execFlag: boolean,
      execData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    iReceive(
      requestSender: string,
      packet: BytesLike,
      srcChainId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedValue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ourContractOnChains(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setContractOnChain(
      chainId: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGateway(
      gateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toBytes(a: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyNft(
      order: {
        orderChain: string;
        owner: string;
        collection: string;
        token_id: BigNumberish;
        nonce: BigNumberish;
        chainsIds: string[];
        priceOnChains: BigNumberish[];
      },
      signature: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gatewayContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequestMetadata(
      destGasLimit: BigNumberish,
      destGasPrice: BigNumberish,
      ackGasLimit: BigNumberish,
      ackGasPrice: BigNumberish,
      relayerFees: BigNumberish,
      ackType: BigNumberish,
      isReadCall: boolean,
      asmAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iAck(
      requestIdentifier: BigNumberish,
      execFlag: boolean,
      execData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    iReceive(
      requestSender: string,
      packet: BytesLike,
      srcChainId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedValue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ourContractOnChains(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContractOnChain(
      chainId: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGateway(
      gateway: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toBytes(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
