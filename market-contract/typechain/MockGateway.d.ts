/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockGatewayInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "chainId()": FunctionFragment;
    "eventNonce()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "iAck((address[],uint64[],uint256),bytes[],(uint256,uint256,string,address,bytes,bool),string)": FunctionFragment;
    "iReceive((address[],uint64[],uint256),bytes[],(uint256,uint256,uint256,string,address,string,address,string,address,bytes,bool),string)": FunctionFragment;
    "iSend(uint256,uint256,string,string,bytes,bytes)": FunctionFragment;
    "iSendDefaultFee()": FunctionFragment;
    "initialize()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDappMetadata(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toBytes(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "iAck",
    values: [
      {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      BytesLike[],
      {
        requestIdentifier: BigNumberish;
        ackRequestIdentifier: BigNumberish;
        destChainId: string;
        requestSender: string;
        execData: BytesLike;
        execFlag: boolean;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "iReceive",
    values: [
      {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      BytesLike[],
      {
        routeAmount: BigNumberish;
        requestIdentifier: BigNumberish;
        requestTimestamp: BigNumberish;
        srcChainId: string;
        routeRecipient: string;
        destChainId: string;
        asmAddress: string;
        requestSender: string;
        handlerAddress: string;
        packet: BytesLike;
        isReadCall: boolean;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "iSend",
    values: [BigNumberish, BigNumberish, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "iSendDefaultFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDappMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iAck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "iSendDefaultFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDappMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "IAckEvent(uint256,uint256,string,string,bytes,bool)": EventFragment;
    "IReceiveEvent(uint256,uint256,string,string,string,string,bytes,bool)": EventFragment;
    "ISendEvent(uint256,uint256,uint256,address,string,string,string,bytes,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IAckEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IReceiveEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ISendEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type IAckEventEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, boolean] & {
    eventNonce: BigNumber;
    requestIdentifier: BigNumber;
    relayerRouterAddress: string;
    chainId: string;
    data: string;
    success: boolean;
  }
>;

export type IReceiveEventEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, string, string, boolean] & {
    requestIdentifier: BigNumber;
    eventNonce: BigNumber;
    srcChainId: string;
    destChainId: string;
    relayerRouterAddress: string;
    requestSender: string;
    execData: string;
    execStatus: boolean;
  }
>;

export type ISendEventEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    version: BigNumber;
    routeAmount: BigNumber;
    eventNonce: BigNumber;
    requestSender: string;
    srcChainId: string;
    destChainId: string;
    routeRecipient: string;
    requestMetadata: string;
    requestPacket: string;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class MockGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockGatewayInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[string]>;

    eventNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    iAck(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      crossChainAckPayload: {
        requestIdentifier: BigNumberish;
        ackRequestIdentifier: BigNumberish;
        destChainId: string;
        requestSender: string;
        execData: BytesLike;
        execFlag: boolean;
      },
      relayerRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    iReceive(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      requestPayload: {
        routeAmount: BigNumberish;
        requestIdentifier: BigNumberish;
        requestTimestamp: BigNumberish;
        srcChainId: string;
        routeRecipient: string;
        destChainId: string;
        asmAddress: string;
        requestSender: string;
        handlerAddress: string;
        packet: BytesLike;
        isReadCall: boolean;
      },
      relayerRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    iSend(
      version: BigNumberish,
      routeAmount: BigNumberish,
      routeRecipient: string,
      destChainId: string,
      requestMetadata: BytesLike,
      requestPacket: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    iSendDefaultFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toBytes(
      a: string,
      overrides?: CallOverrides
    ): Promise<[string] & { b: string }>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<string>;

  eventNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  iAck(
    _currentValset: {
      validators: string[];
      powers: BigNumberish[];
      valsetNonce: BigNumberish;
    },
    _sigs: BytesLike[],
    crossChainAckPayload: {
      requestIdentifier: BigNumberish;
      ackRequestIdentifier: BigNumberish;
      destChainId: string;
      requestSender: string;
      execData: BytesLike;
      execFlag: boolean;
    },
    relayerRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  iReceive(
    _currentValset: {
      validators: string[];
      powers: BigNumberish[];
      valsetNonce: BigNumberish;
    },
    _sigs: BytesLike[],
    requestPayload: {
      routeAmount: BigNumberish;
      requestIdentifier: BigNumberish;
      requestTimestamp: BigNumberish;
      srcChainId: string;
      routeRecipient: string;
      destChainId: string;
      asmAddress: string;
      requestSender: string;
      handlerAddress: string;
      packet: BytesLike;
      isReadCall: boolean;
    },
    relayerRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  iSend(
    version: BigNumberish,
    routeAmount: BigNumberish,
    routeRecipient: string,
    destChainId: string,
    requestMetadata: BytesLike,
    requestPacket: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  iSendDefaultFee(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDappMetadata(
    feePayerAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toBytes(a: string, overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<string>;

    eventNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    iAck(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      crossChainAckPayload: {
        requestIdentifier: BigNumberish;
        ackRequestIdentifier: BigNumberish;
        destChainId: string;
        requestSender: string;
        execData: BytesLike;
        execFlag: boolean;
      },
      relayerRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    iReceive(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      requestPayload: {
        routeAmount: BigNumberish;
        requestIdentifier: BigNumberish;
        requestTimestamp: BigNumberish;
        srcChainId: string;
        routeRecipient: string;
        destChainId: string;
        asmAddress: string;
        requestSender: string;
        handlerAddress: string;
        packet: BytesLike;
        isReadCall: boolean;
      },
      relayerRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    iSend(
      version: BigNumberish,
      routeAmount: BigNumberish,
      routeRecipient: string,
      destChainId: string,
      requestMetadata: BytesLike,
      requestPacket: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iSendDefaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toBytes(a: string, overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "IAckEvent(uint256,uint256,string,string,bytes,bool)"(
      eventNonce?: BigNumberish | null,
      requestIdentifier?: BigNumberish | null,
      relayerRouterAddress?: null,
      chainId?: null,
      data?: null,
      success?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, string, boolean],
      {
        eventNonce: BigNumber;
        requestIdentifier: BigNumber;
        relayerRouterAddress: string;
        chainId: string;
        data: string;
        success: boolean;
      }
    >;

    IAckEvent(
      eventNonce?: BigNumberish | null,
      requestIdentifier?: BigNumberish | null,
      relayerRouterAddress?: null,
      chainId?: null,
      data?: null,
      success?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, string, boolean],
      {
        eventNonce: BigNumber;
        requestIdentifier: BigNumber;
        relayerRouterAddress: string;
        chainId: string;
        data: string;
        success: boolean;
      }
    >;

    "IReceiveEvent(uint256,uint256,string,string,string,string,bytes,bool)"(
      requestIdentifier?: BigNumberish | null,
      eventNonce?: BigNumberish | null,
      srcChainId?: null,
      destChainId?: null,
      relayerRouterAddress?: null,
      requestSender?: null,
      execData?: null,
      execStatus?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, string, string, string, boolean],
      {
        requestIdentifier: BigNumber;
        eventNonce: BigNumber;
        srcChainId: string;
        destChainId: string;
        relayerRouterAddress: string;
        requestSender: string;
        execData: string;
        execStatus: boolean;
      }
    >;

    IReceiveEvent(
      requestIdentifier?: BigNumberish | null,
      eventNonce?: BigNumberish | null,
      srcChainId?: null,
      destChainId?: null,
      relayerRouterAddress?: null,
      requestSender?: null,
      execData?: null,
      execStatus?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, string, string, string, boolean],
      {
        requestIdentifier: BigNumber;
        eventNonce: BigNumber;
        srcChainId: string;
        destChainId: string;
        relayerRouterAddress: string;
        requestSender: string;
        execData: string;
        execStatus: boolean;
      }
    >;

    "ISendEvent(uint256,uint256,uint256,address,string,string,string,bytes,bytes)"(
      version?: null,
      routeAmount?: null,
      eventNonce?: BigNumberish | null,
      requestSender?: null,
      srcChainId?: null,
      destChainId?: null,
      routeRecipient?: null,
      requestMetadata?: null,
      requestPacket?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      {
        version: BigNumber;
        routeAmount: BigNumber;
        eventNonce: BigNumber;
        requestSender: string;
        srcChainId: string;
        destChainId: string;
        routeRecipient: string;
        requestMetadata: string;
        requestPacket: string;
      }
    >;

    ISendEvent(
      version?: null,
      routeAmount?: null,
      eventNonce?: BigNumberish | null,
      requestSender?: null,
      srcChainId?: null,
      destChainId?: null,
      routeRecipient?: null,
      requestMetadata?: null,
      requestPacket?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      {
        version: BigNumber;
        routeAmount: BigNumber;
        eventNonce: BigNumber;
        requestSender: string;
        srcChainId: string;
        destChainId: string;
        routeRecipient: string;
        requestMetadata: string;
        requestPacket: string;
      }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    eventNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iAck(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      crossChainAckPayload: {
        requestIdentifier: BigNumberish;
        ackRequestIdentifier: BigNumberish;
        destChainId: string;
        requestSender: string;
        execData: BytesLike;
        execFlag: boolean;
      },
      relayerRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    iReceive(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      requestPayload: {
        routeAmount: BigNumberish;
        requestIdentifier: BigNumberish;
        requestTimestamp: BigNumberish;
        srcChainId: string;
        routeRecipient: string;
        destChainId: string;
        asmAddress: string;
        requestSender: string;
        handlerAddress: string;
        packet: BytesLike;
        isReadCall: boolean;
      },
      relayerRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    iSend(
      version: BigNumberish,
      routeAmount: BigNumberish,
      routeRecipient: string,
      destChainId: string,
      requestMetadata: BytesLike,
      requestPacket: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    iSendDefaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iAck(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      crossChainAckPayload: {
        requestIdentifier: BigNumberish;
        ackRequestIdentifier: BigNumberish;
        destChainId: string;
        requestSender: string;
        execData: BytesLike;
        execFlag: boolean;
      },
      relayerRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    iReceive(
      _currentValset: {
        validators: string[];
        powers: BigNumberish[];
        valsetNonce: BigNumberish;
      },
      _sigs: BytesLike[],
      requestPayload: {
        routeAmount: BigNumberish;
        requestIdentifier: BigNumberish;
        requestTimestamp: BigNumberish;
        srcChainId: string;
        routeRecipient: string;
        destChainId: string;
        asmAddress: string;
        requestSender: string;
        handlerAddress: string;
        packet: BytesLike;
        isReadCall: boolean;
      },
      relayerRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    iSend(
      version: BigNumberish,
      routeAmount: BigNumberish,
      routeRecipient: string,
      destChainId: string,
      requestMetadata: BytesLike,
      requestPacket: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    iSendDefaultFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDappMetadata(
      feePayerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
